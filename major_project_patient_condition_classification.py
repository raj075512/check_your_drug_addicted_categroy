# -*- coding: utf-8 -*-
"""major_project_patient_condition_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WXvv8EheLwELtDU-fzUCRYVizIIB2nok
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd # data preprocessing
import itertools # confusion matrix
import string
import numpy as np
import seaborn as sns
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
import matplotlib.pyplot as plt
# %matplotlib inline

pd.set_option('display.max_rows', None)

df=pd.read_csv('/content/drugsComTrain_raw.csv')



df.head(2)

df.condition.value_counts()

df_train = df[(df['condition']=='Anxiety') | (df['condition']=='Depression')|(df['condition']=='Pain')|(df['condition']=='Bipolar Disorde')]

df.shape

df_train.shape

X = df_train.drop(['drugName','rating','date','usefulCount','uniqueID'],axis=1)

X.head()

"""EDA

"""

X.condition.value_counts()

X.head()

X.shape

df_train.shape

X.head()



"""Segregating the data frame for analysing the individual condition"""

X_pain=X[(X['condition']=='Pain')]
X_depression=X[(X['condition']=='Depression')]
X_anxiety=X[(X['condition']=='Anxiety')]
X_bipolar_disorder=X[(X['condition']=='Bipolar Disorde')]



"""Representation in the word cloud"""

from wordcloud import WordCloud

plt.figure(figsize=(20,20))    #text that is Fake news headlines

wc=WordCloud(max_words=500 ,width=1600 ,height=800).generate(" ".join(X_pain.review))

plt.imshow(wc,interpolation="bilinear")
plt.title("cloud word for ' pain '  ",fontsize=14)

"""get the word cloud for depression"""

plt.figure(figsize=(20,20))
wc=WordCloud(max_words=1300 ,height=1300, width=1200).generate(" ".join(X_depression.review))

plt.imshow(wc,interpolation="bilinear")
plt.title("cloud for depression ",fontsize=10)

plt.figure(figsize = (20,20)) # Text that is Fake News Headlines
wc = WordCloud(max_words = 500 , width = 1600 , height = 800).generate(" ".join(X_bipolar_disorder.review))
plt.imshow(wc , interpolation = 'bilinear')
plt.title('Word cloud for biploar disorder',fontsize=14)

plt.figure(figsize = (20,20)) # Text that is Fake News Headlines
wc = WordCloud(max_words = 500 , width = 1600 , height = 800).generate(" ".join(X_anxiety.review))
plt.imshow(wc , interpolation = 'bilinear')
plt.title('Word cloud for anxeity',fontsize=14)

"""DATA PREPROCESSING"""

X['review'][11]

X.head()

for i, col in enumerate(X.columns):
    X.iloc[:, i] = X.iloc[:, i].str.replace('"', '')

# set the width of the column to maximum
pd.set_option('max_colwidth',-1)

X.head()

# remove the quote
for i ,col  in enumerate(X.columns):
  X.iloc[:,i]=X.iloc[:,i].str.replace('"','')

X.head()

"""cleaning the unwanted word -> stopWords"""

import nltk
from nltk.corpus import stopwords
nltk.download("stopwords")
stop=stopwords.words('english')

stop

import nltk
from nltk.stem import WordNetLemmatizer
from nltk.stem import PorterStemmer

porter = PorterStemmer()

lemmatizer = WordNetLemmatizer()


print(porter.stem("sportingly"))
print(porter.stem("very"))
print(porter.stem("troubled"))

print(lemmatizer.lemmatize("sportingly"))
print(lemmatizer.lemmatize("very"))
print(lemmatizer.lemmatize("troubled"))

from bs4 import BeautifulSoup
import re

def review_to_words(raw_review):
    # 1. Delete HTML
    review_text = BeautifulSoup(raw_review, 'html.parser').get_text()
    # 2. Make a space
    letters_only = re.sub('[^a-zA-Z]', ' ', review_text)
    # 3. lower letters
    words = letters_only.lower().split()
    # 5. Stopwords
    meaningful_words = [w for w in words if not w in stop]
    # 6. lemmitization
    lemmitize_words = [lemmatizer.lemmatize(w) for w in meaningful_words]
    # 7. space join words
    return( ' '.join(lemmitize_words))

X['review_clean']=X['review'].apply(review_to_words)

X.head()

"""CREATING features and target variables"""

X_feat=X['review_clean']
y=X['condition']

X_train,X_test,y_train,y_test =train_test_split(X_feat,y,stratify=y,test_size=0.2,random_state=0)

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

"""Bag of words"""

count_vectorizer = CountVectorizer(stop_words='english')

count_train = count_vectorizer.fit_transform(X_train)

count_test = count_vectorizer.transform(X_test)

count_train

"""Machine learning Model : Naive bayes"""

mnb = MultinomialNB()
mnb.fit(count_train, y_train)
pred = mnb.predict(count_test)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)

cm = metrics.confusion_matrix(y_test, pred, labels=['Pain', 'Depression','Anxiety','Bipolar Disorde'])
plot_confusion_matrix(cm, classes=['Pain', 'Depression','Anxiety','Bipolar Disorde'])

"""machine learning :passive aggressive classifer"""

from sklearn.linear_model import PassiveAggressiveClassifier,LogisticRegression

passive = PassiveAggressiveClassifier()
passive.fit(count_train, y_train)
pred = passive.predict(count_test)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
# cm = metrics.confusion_matrix(y_test, pred, labels=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
# plot_confusion_matrix(cm, classes=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
cm=metrics.confusion_matrix(y_test,pred,labels=['Pain','Depression','Anxiety','Bipolar Disorde'])
plot_confusion_matrix(cm,classes=['Pain','Depression','Anxiety','Bipolar Disorde'])

"""TFIDF"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.8)
tfidf_train_2 = tfidf_vectorizer.fit_transform(X_train)
tfidf_test_2 = tfidf_vectorizer.transform(X_test)

"""## Machine Learning Model : Naive Bayes"""

mnb_tf = MultinomialNB()
mnb_tf.fit(tfidf_train_2, y_train)
pred = mnb_tf.predict(tfidf_test_2)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
cm=metrics.confusion_matrix(y_test,pred,labels=['Pain','Depression','Anxiety','Bipolar Disorde'])
plot_confusion_matrix(cm,classes=['Pain','Depression','Anxiety','Bipolar Disorde'])

"""## Machine Learning Model TFIDF"""

tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.8)
tfidf_train = tfidf_vectorizer.fit_transform(X_train)
tfidf_test = tfidf_vectorizer.transform(X_test)

pass_tf = PassiveAggressiveClassifier()
pass_tf.fit(tfidf_train, y_train)
pred = pass_tf.predict(tfidf_test)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
# cm = metrics.confusion_matrix(y_test, pred, labels=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
# plot_confusion_matrix(cm, classes=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])

cm=metrics.confusion_matrix(y_test,pred,labels=['Pain','Depression','Anxiety','Bipolar Disorde'])
plot_confusion_matrix(cm,classes=['Pain','Depression','Anxiety','Bipolar Disorde'])

"""TFIDF : Bigrams"""

tfidf_vectorizer2 = TfidfVectorizer(stop_words='english', max_df=0.8, ngram_range=(1,2))
tfidf_train_2 = tfidf_vectorizer2.fit_transform(X_train)
tfidf_test_2 = tfidf_vectorizer2.transform(X_test)

pass_tf = PassiveAggressiveClassifier()
pass_tf.fit(tfidf_train_2, y_train)
pred = pass_tf.predict(tfidf_test_2)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
# cm = metrics.confusion_matrix(y_test, pred, labels=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
# plot_confusion_matrix(cm, classes=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
cm=metrics.confusion_matrix(y_test,pred,labels=['Pain','Depression','Anxiety','Bipolar Disorde'])
plot_confusion_matrix(cm,classes=['Pain','Depression','Anxiety','Bipolar Disorde'])

"""## TFIDF : Trigrams"""

tfidf_vectorizer3 = TfidfVectorizer(stop_words='english', max_df=0.8, ngram_range=(1,3))
tfidf_train_3 = tfidf_vectorizer3.fit_transform(X_train)
tfidf_test_3 = tfidf_vectorizer3.transform(X_test)

pass_tf = PassiveAggressiveClassifier()
pass_tf.fit(tfidf_train_3, y_train)
pred = pass_tf.predict(tfidf_test_3)
score = metrics.accuracy_score(y_test, pred)
print("accuracy:   %0.3f" % score)
# cm = metrics.confusion_matrix(y_test, pred, labels=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
# plot_confusion_matrix(cm, classes=['Birth Control', 'Depression','Diabetes, Type 2','High Blood Pressure'])
cm=metrics.confusion_matrix(y_test,pred,labels=['Pain','Depression','Anxiety','Bipolar Disorde'])
plot_confusion_matrix(cm,classes=['Pain','Depression','Anxiety','Bipolar Disorde'])

"""## Most important Features"""

# def most_informative_feature_for_class(vectorizer, classifier, classlabel, n=10):

#     # Get the index of the class label
#     label_id = list(classifier.classes_).index(classlabel)

#     # Get the feature names from the vectorizer
#     feature_names = vectorizer.get_feature_names_out()

#     # Get the coefficients and corresponding feature names for the specified class
#     top_n_features = sorted(zip(classifier.coef_[label_id], feature_names))[-n:]

#     # Print the top features
#     for coef, feat in top_n_features:
#         print(classlabel, feat, coef)

# # Example usage:
# # Assuming tfidf_vectorizer and pass_tf are defined elsewhere in your code
# # Make sure pass_tf is a trained classifier
# most_informative_feature_for_class(tfidf_vectorizer, pass_tf, 'Depression')

def most_informative_feature_for_class(vectorizer, classifier, classlabel, n=10):
    labelid = list(classifier.classes_).index(classlabel)
    feature_names = vectorizer.get_feature_names_out()

    # feature_names = vectorizer.get_feature_names()
    topn = sorted(zip(classifier.coef_[labelid], feature_names))[-n:]

    for coef, feat in topn:
        print (classlabel, feat, coef)



most_informative_feature_for_class(tfidf_vectorizer, pass_tf, 'Pain')

most_informative_feature_for_class(tfidf_vectorizer, pass_tf, 'Depression')

most_informative_feature_for_class(tfidf_vectorizer, pass_tf, 'Anxiety')

most_informative_feature_for_class(tfidf_vectorizer, pass_tf, 'Bipolar Disorde')

X.tail()

text =["This is the third med I&#039;ve tried for anxiety and mild depression. Been on it for a week and I hate it so much. I am so dizzy, I have major diarrhea and feel worse than I started. Contacting my doc in the am and changing asap."]
test = tfidf_vectorizer.transform(text)
pred1=pass_tf.predict(test)[0]
pred1

